// Code generated by mockery v2.0.0. DO NOT EDIT.

package storage

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// MockCRUD is an autogenerated mock type for the CRUD type
type MockCRUD struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockCRUD) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: entity
func (_m *MockCRUD) Create(entity Entity) (opeWrap, error) {
	ret := _m.Called(entity)

	var r0 opeWrap
	if rf, ok := ret.Get(0).(func(Entity) opeWrap); ok {
		r0 = rf(entity)
	} else {
		r0 = ret.Get(0).(opeWrap)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Entity) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTxn is an autogenerated mock type for the Txn type
type MockTxn struct {
	mock.Mock
}

// Commit provides a mock function with given fields: ctx
func (_m *MockTxn) Commit(ctx context.Context) (bool, error) {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoFound provides a mock function with given fields: ope
func (_m *MockTxn) DoFound(ope opeWrap) {
	_m.Called(ope)
}

// DoNotFound provides a mock function with given fields: ope
func (_m *MockTxn) DoNotFound(ope opeWrap) {
	_m.Called(ope)
}

// Find provides a mock function with given fields: keyValue
func (_m *MockTxn) Find(keyValue string) {
	_m.Called(keyValue)
}
